# Nom de la CI/CD affiché dans l'interface GitHub Actions
name: Testing GitHub Actions

# Nom d'exécution dynamique, indiquant quel utilisateur a déclenché le workflow
run-name: ${{ github.actor }} is testing 🚀

# Déclencheurs de l'action :
# - Lors d'une pull request
# - Lors d'un push sur la branche main
on:
  pull_request:
  push:
    branches:
      - main

jobs:
  # === JOB FRONT ===
  test-front:
    name: Run front test job
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: front

    steps:
      #Récupère le code du dépôt GitHub
      - name: Check out repository code
        uses: actions/checkout@v4

      #Configure Node.js pour la version 16
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      #Installe Google Chrome nécessaire pour les tests en mode headless (pas d'interface visuelle)
      - name: Install Chrome
        run: |
          sudo apt-get install -y wget gnupg2
          wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
          sudo sh -c 'echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" >> /etc/apt/sources.list.d/google-chrome.list'
          sudo apt-get update
          sudo apt-get install -y google-chrome-stable

      #Installe les dépendances Node.js
      - name: Install dependencies
        working-directory: front
        run: |
          npm ci
          npm install --save-dev karma-junit-reporter

      # Build frontend Angular
      - name: Build Angular project
        run: npm run build

      #Lancement des tests Angular avec options (ChromeHeadless + couverture + JUnit)
      - name: Run tests
        run: npm run test -- --watch=false --browsers=ChromeHeadless --code-coverage --reporters=junit

      #Archive le rapport de couverture généré
      - name: Archive coverage report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report-frontend
          path: front/coverage/bobapp/

      #Génère un rapport de test lisible pour GitHub
      - name: Test Report
        uses: phoenix-actions/test-reporting@v8
        id: front-test-report
        if: always()
        with:
          name: Angular Tests
          path: front/reports/karma-test-results.xml
          reporter: java-junit

      #Affiche l’URL du rapport dans la console
      - name: Show report URL
        run: |
          echo "front url is ${{ steps.front-test-report.outputs.runHtmlUrl }}"
          echo "🍏 This job's status is ${{ job.status }}."

  # === JOB BACK ===
  test-back:
    name: Run back test job
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: back

    steps:
      - name: Check out repository code
        uses: actions/checkout@v4

      # Configuration de Java (JDK 11)
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '11'

      # Build Maven complet
      - name: Build backend
        run: mvn clean install

      # Lancement des tests Maven
      - name: Build and test with Maven
        working-directory: back
        run: mvn clean test

      # Génération du rapport de test
      - name: Test Report
        uses: phoenix-actions/test-reporting@v8
        id: back-test-report
        if: always()
        with:
          name: Java Tests
          path: back/target/surefire-reports/*.xml
          reporter: java-junit

      # Archivage du rapport de couverture généré par Jacoco
      - name: Archive back coverage report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report-backend
          path: back/target/site/jacoco/

      # Affichage de l'URL du rapport
      - name: Read output variables
        run: |
          echo "back url is ${{ steps.back-test-report.outputs.runHtmlUrl }}"
          echo "🍏 This job's status is ${{ job.status }}."

  # === ANALYSE SONARQUBE BACK ===
  sonarqube-back:
    name: SonarQube-Back
    runs-on: ubuntu-latest
    needs:
      - test-back
    steps:
      # Récupère tout l'historique Git (requis par Sonar)
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Configuration de Java (JDK 11)
      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '11'

      # Build Maven nécessaire pour l'analyse Sonar
      - name: Build backend
        run: |
          cd back
          mvn clean verify

      # Analyse SonarQube avec configuration spécifique
      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN_BACK }}
        with:
          projectBaseDir: back
          args: >
            -Dsonar.projectKey=b-audrey_bobapp-back
            -Dsonar.organization=b-audrey
            -Dsonar.sources=.
            -Dsonar.java.binaries=target/classes
            -Dsonar.tests=src/test
            -Dsonar.test.inclusions=**/*Tests.java
            -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml
            -Dsonar.exclusions=**/node_modules/**,**/dist/**,**/build/**,**/target/**
            -Dsonar.branch.name=${{ github.head_ref || github.ref_name }}

  # === ANALYSE SONARQUBE FRONT ===
  sonarqube-front:
    name: SonarQube-Front
    runs-on: ubuntu-latest
    needs:
      - test-front
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Téléchargement du rapport de couverture Angular
      - name: Download front coverage report
        uses: actions/download-artifact@v4
        with:
          name: coverage-report-frontend
          path: front/coverage/

      # Analyse SonarQube du frontend
      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN_FRONT }}
        with:
          projectBaseDir: front
          args: >
            -Dsonar.projectKey=b-audrey_bobapp-front
            -Dsonar.organization=b-audrey
            -Dsonar.sources=.
            -Dsonar.language=js
            -Dsonar.test.inclusions=**/*.spec.ts
            -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info
            -Dsonar.exclusions=**/node_modules/**,**/dist/**,**/build/**
            -Dsonar.branch.name=${{ github.head_ref || github.ref_name }}

  # === BUILD DOCKER FRONT ===
  docker-front:
    runs-on: ubuntu-latest
    needs:
      - sonarqube-front
    steps:
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up QEMU #(multi-arch build support)
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx #(builder avancé Docker)
        uses: docker/setup-buildx-action@v3

      # Build et push de l’image Docker du frontend
      - name: Build and push front
        uses: docker/build-push-action@v6
        with:
          context: "{{defaultContext}}:front"
          push: ${{ github.ref == 'refs/heads/main' }}
          tags: baudrey/front:${{ github.sha }}

  # === BUILD DOCKER BACK ===
  docker-back:
    needs:
      - sonarqube-back
    runs-on: ubuntu-latest
    steps:
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Build et push de l’image Docker du backend
      - name: Build and push back
        uses: docker/build-push-action@v6
        with:
          context: "{{defaultContext}}:back"
          push: ${{ github.ref == 'refs/heads/main' }}
          tags: baudrey/back:${{ github.sha }}